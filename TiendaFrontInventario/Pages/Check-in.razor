@page "/Check-in"
@inject IServiciosOrdenes ServiciosOrdenes
@inject IServiciosDetalleOrden ServiciosDetalleOrden
@inject IServiciosProductos ServiciosProductos

<!DOCTYPE html>
    <html>
    <head>
        <title>Check-in</title>
        <link rel="stylesheet" href="~/css/app.css" />
    </head>
    <body>
        <h1 class="H1">Facturacion</h1>

        <div class="Container2">
        
        <button @onclick="IniciarFac">Iniciar Facturacion</button>
        @if (listaO != null)
        {
            <p>Codigo de Facturacion:@CodOrder</p>
            <p>Fecha de Facturacion:@Fecha</p>
            <p>Que deseas hacer:</p>
            <select id="Operacion" @bind="TipoOrden">
                <option value="Compra">Compra</option>
                <option value="Venta">Venta</option>
            </select>
            <p>Lo que vas a hacer:@TipoOrden</p>
            <hr />
            <div class="Container2">
                <p>Registrar Producto:</p>
                <button @onclick="GetProducts">Comenzar</button>
                @if(listap!=null)
                {
                    <p>¿Cual deseas Registrar</p>
                    <table>
                        <thead>
                            <tr>
                                <th>ProductID</th>
                                <th>ProductName</th>
                                <th>Description</th>
                                <th>Stock</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (Productos item in listap)
                            {
                                <tr @onclick="() => SelectProduct(item)">
                                    <td>@item.CodigoProducto</td>
                                    <td>@item.NombreProducto</td>
                                    <td>@item.Descripcion</td>
                                    <td>@item.Stock</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                    @if (CodigoSeleccionado != null)
                    {
                        <p>Codigo del Producto Seleccionado:@CodigoSeleccionado</p>

                    }
                    else
                    {
                        <p>No se ha Seleccionado nada</p>
                    }
                }
                else
                {
                    <p>Error:@MessageProducts</p>
                    
                }

                <hr />

                <div class="Container2">

                    <p>Digite la cantidad de Producto a comprar:
                       <input type="number" @bind="Cantidad" required />
                    </p>

                    <p>
                        Precio unitario del Producto:
                        <input type="text" @bind="PrecioUnitario" readonly />
                    </p>
                    <p class="contador">Total Comprado:@acumulado</p>

                    <button @onclick="PostDetalleOrdenes">Agregar Producto</button>

                    @if(SuccessPostOrders!=false)
                    {
                        <p>Factura Registrada</p>
                        if(SuccessPostDT!=false)
                        {
                            <p>Producto Registrado a la factura</p>
                        }
                        else
                        {
                            <p>Error:@MessagePostDT</p>
                        }
                    }
                    else
                    {
                        <p>Error:@MessagePostOrders</p>
                        
                    }
                </div>
                
            </div>
            <div class="Container2">
                <button @onclick="LimpiarCampos">Limpiar Campos</button>
                <button @onclick="MostrarFactura">Mostrar Factura</button>
                @if(SuccessGetFactura!=false)
                {
                    <div class="Container3">
                        <table>
                            <thead>
                                <tr>
                                    <th>OrderID</th>
                                    <th>ProductID</th>
                                    <th>ProductName</th>
                                    <th>Quantity</th>
                                    <th>Unit Price</th>
                                    <th>Total</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (Fac item in listaFactura)
                                {
                                    <tr>
                                        <td>@item.OrderID</td>
                                        <td>@item.ProductID</td>
                                        <td>@item.ProductName</td>
                                        <td>@item.Quantity</td>
                                        <td>@item.UnitPrice</td>
                                        <td>@item.Totality</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                    
                }
                else
                {
                    <p>Error la lista esta vacia:@MessageFactura</p>
                    
                }
            </div>
            <hr />
            <div class="container2">
                <button @onclick="Finalizar">Finalizar Factura</button>
                @if(SuccessPutOrder!=false)
                {
                    <p>Factura finalizada</p>
                }
                else
                {
                    <p>Error:@MessagePutOrder</p>
                }
            </div>
        }
        else
        {
            <p>"Error:"@MessageGetOrders</p>

        }
        </div>
    </body>
    </html>


@code {


    //Probando el Acceso, para perdir el ultimo codigo de ordenes
    public List<Ordenes>? listaO { get; set; }
    public int CodOrder { get; set; }

    public bool Accion = false;
    public string? MessageGetOrders { get; set; }
    protected async Task IniciarFac()
    {
        try
        {
            string url = "https://localhost:7263/api/Ordenes";
            var response = await ServiciosOrdenes.GetOrdenes<List<Ordenes>>(url);
            if(!response.Error)
            {
                listaO = response.Response;
                var posicion = listaO?.LastOrDefault();
                CodOrder = posicion?.OrderID ?? 0;
                CodOrder++;
                Accion = true;
                MessageGetOrders = String.Empty;

            }
            else
            {
                listaO = null;
                MessageGetOrders = await response.GetErrorMessageAsync();
                CodOrder = -1;


            }


        }catch (Exception e)
        {
            listaO = null;
            MessageGetOrders = "Error:" + e.Message;
            CodOrder = -1;

        }

    }


    // public Ordenes OrderPost { get; set; } = new Ordenes();
    // public bool SucessPostOrderTry = false;
    // public string? MessagePostOrderTry { get; set; }
    // protected async Task IniciarFac()
    // {
    //     try
    //     {
    //         string url = "https://localhost:7263/api/Ordenes";
    //         var response = await ServiciosOrdenes.GetOrdenes<List<Ordenes>>(url);
    //         if (!response.Error)
    //         {
    //             listaO = response.Response;
    //             var posicion = listaO?.LastOrDefault();
    //             CodOrder = posicion.OrderID;
    //             // OrderPost.OrderID=CodOrder++;
    //             // OrderPost.TipoOrden = "-";
    //             // OrderPost.FechaOrden = DateTime.Now;
    //             // OrderPost.Total = 0;
    //             OrderPost = new Ordenes
    //             {
    //                     OrderID = CodOrder,
    //                     TipoOrden = "-",
    //                     FechaOrden = DateTime.Now,
    //                     Total = 0
    //             };
    //             MessageGetOrders = String.Empty;

    //             try
    //             {
    //                 var responsepost = await ServiciosOrdenes.PostOrdenes<Ordenes>(url, OrderPost);
    //                 if(!responsepost.Error)
    //                 {
    //                     SucessPostOrderTry = true;
    //                     MessagePostOrderTry = String.Empty;

    //                 }
    //                 else
    //                 {
    //                     SucessPostOrderTry=false;
    //                     MessagePostOrderTry = await responsepost.GetErrorMessageAsync();
    //                 }

    //             }catch(Exception e)
    //             {
    //                 SucessPostOrderTry = false;
    //                 MessagePostOrderTry = "Error:" + e.Message;


    //             }

    //         }
    //         else
    //         {
    //             listaO = null;
    //             MessageGetOrders = await response.GetErrorMessageAsync();
    //             CodOrder = -1;


    //         }


    //     }
    //     catch (Exception e)
    //     {
    //         listaO = null;
    //         MessageGetOrders = "Error:" + e.Message;
    //         CodOrder = -1;

    //     }

    // }



    //Metodo para Traer Productos
    public List<Productos>? listap { get; set; }
    public string? MessageProducts { get; set; }
    protected async Task GetProducts()
    {
        try
        {
            string url = "https://localhost:7263/api/Productos";
            var response = await ServiciosProductos.GetProductos<List<Productos>>(url);
            if (!response.Error)
            {
                listap = response.Response;
                MessageProducts= String.Empty;
            }
            else
            {
                listap = null;
                MessageProducts = await response.GetErrorMessageAsync();
            }

        }
        catch (Exception e)
        {
            listap = null;
            MessageProducts = "Error:" + e.Message;

        }

    }


    //Metodo para seleccionar el id o codigo del producto en el cual se encuentra parado el usuario
    public int CodigoSeleccionado { get; set; }
    public decimal PrecioUnitario { get; set; }
    public string? ProductName { get; set; }
    public decimal Total { get; set; }

    protected void SelectProduct(Productos item)
    {
        CodigoSeleccionado = item.CodigoProducto;
        PrecioUnitario = item.PrecioVenta;
        ProductName = item.NombreProducto;
    }


    //Metodo para agregar DetalleOrdenes
    public DetalleOrden DTOrdenes { get; set; } = new DetalleOrden();
    public bool SuccessPostDT = false;
    public string? MessagePostDT { get; set; }
    public int Cantidad { get; set; }
    //Lista para mostrar la factura
    public List<Fac>? listaFactura { get; set; } = new List<Fac>();
    public Fac? Factura { get; set; } = new Fac(); /*De las 2 formas da lo mismo para mostrar la lista, sea con
                                               Constructor o no */


    protected async Task PostDetalleOrdenes()
    {
        if(ControladorVenta != true)
        {
            await PostOrdenes();
            if (SuccessPostOrders != false)
            {
                DTOrdenes.IdOrden = CodOrder;
                DTOrdenes.ProductoID = CodigoSeleccionado;
                DTOrdenes.Cantidad = Cantidad;
                DTOrdenes.PrecioUnitario = PrecioUnitario;
                //Solo para poder capturar el total del precio a pagar por ese producto
                Total = DTOrdenes.PrecioUnitario * DTOrdenes.Cantidad;

                LlenarObjetoFactura();
                listaFactura?.Add(Factura);

                //Agregar el objeto factura a la lista factura para que este se vaya agregando a la tabla de factura

                try
                {
                    string url = "https://localhost:7263/api/DetalleOrdens";
                    var response = await ServiciosDetalleOrden.PostDetalleOrden<DetalleOrden>(url, DTOrdenes);
                    if (!response.Error)
                    {
                        SuccessPostDT = true;
                        MessagePostDT = String.Empty;
                    }
                    else
                    {
                        SuccessPostDT = false;
                        MessagePostDT = await response.GetErrorMessageAsync();
                    }


                }
                catch (Exception e)
                {
                    SuccessPostDT = false;
                    MessagePostDT = "Error:" + e.Message;

                }

            }
            else
            {
                MessagePostOrders += MessagePostOrders + "Error en el post";

            }

        }
        else
        {
            await ProcesarNuevosProductos();
            if(SuccessPostDT!=false)
            {
                SuccessPostOrders = true;
            }
            else
            {
                SuccessPostOrders = false;
            }
        }

    }


    //Post Ordenes para mas adelante, cuando se finalice el proceso de facturacion
    public Ordenes Order { get; set; } = new Ordenes();
    public bool SuccessPostOrders = false;
    public string? MessagePostOrders { get; set; }

    public decimal acumulado = 0;

    public string? TipoOrden { get; set; }
    public DateTime Fecha = DateTime.Now;
    public decimal TotalComprado { get; set; }
    public bool ControladorVenta = false;

    protected async Task PostOrdenes()
    {
        Order.OrderID = CodOrder;
        Order.TipoOrden = TipoOrden;
        Order.FechaOrden = Fecha;
        Order.Total = Cantidad * PrecioUnitario;

        acumulado = acumulado + Order.Total;


        try
        {
            string url = "https://localhost:7263/api/Ordenes";
            var response = await ServiciosOrdenes.PostOrdenes<Ordenes>(url, Order);
            if (!response.Error)
            {
                SuccessPostOrders = true;
                MessagePostOrders = String.Empty;
                ControladorVenta = true;

            }
            else
            {
                SuccessPostOrders = false;
                MessagePostOrders = await response.GetErrorMessageAsync();
                ControladorVenta = false;

            }

        }
        catch (Exception e)
        {
            SuccessPostOrders = false;
            MessagePostOrders = "Error:" + e.Message;
            ControladorVenta = false;

        }
    }

    //Metodo para limpiar Campos

    public void LimpiarCampos()
    {
        CodigoSeleccionado = 0;
        Cantidad = 0;
        PrecioUnitario = 0;
        ProductName = null;
        Total = 0;
        listap = null;
        // SuccessPostDT = false;
        MessagePostDT = null;
        // SuccessPostOrders = false;
        MessagePostOrders = null;

    }

    //Metodo para finalizar el registro de factura e iniciar otra
    public bool SuccessPutOrder = false;
    public string? MessagePutOrder { get; set; }
    public Ordenes OrderPut { get; set; } = new Ordenes();
    protected async Task Finalizar()
    {
        // Order.OrderID = CodOrder;
        // Order.TipoOrden = TipoOrden;
        // Order.FechaOrden=Fecha; 
        // Order.Total = acumulado;
        OrderPut.OrderID = CodOrder;
        OrderPut.TipoOrden = TipoOrden;
        OrderPut.FechaOrden = Fecha;
        OrderPut.Total = acumulado;
        try
        {
            string url = "https://localhost:7263/api/Ordenes/"+CodOrder;
            var response = await ServiciosOrdenes.PutOrdenes<Ordenes>(url, OrderPut);
            if(!response.Error)
            {
                SuccessPutOrder = true;
                MessagePutOrder = String.Empty;
                ControladorVenta = false;
                LimpiarCamposFinal();

            }
            else
            {
                SuccessPutOrder = false;
                MessagePutOrder = await response.GetErrorMessageAsync();
                ControladorVenta = true;
            }

        }catch(Exception e)
        {
            SuccessPutOrder = false;
            MessagePutOrder = "Error:" + e.Message;
            ControladorVenta = true;

        }

    }

    public void LimpiarCamposFinal()
    {
        CodOrder = 0;
        listaO = null;
        CodigoSeleccionado = 0;
        Cantidad = 0;
        PrecioUnitario = 0;
        SuccessPostDT = false;
        MessagePostDT = null;
        SuccessPostOrders = false;
        MessagePostOrders = null;
        listap = null;
        acumulado = 0;
    }


    //Metodo para poder procesar nuevos productos

    protected async Task ProcesarNuevosProductos()
    {
        DTOrdenes.IdOrden = CodOrder;
        DTOrdenes.ProductoID = CodigoSeleccionado;
        DTOrdenes.Cantidad = Cantidad;
        DTOrdenes.PrecioUnitario = PrecioUnitario;
        //Para capturar el total del producto a pagar de los demas
        Total = DTOrdenes.PrecioUnitario * DTOrdenes.Cantidad;

        LlenarObjetoFactura();
        listaFactura?.Add(Factura);

        acumulado = acumulado + (DTOrdenes.PrecioUnitario * DTOrdenes.Cantidad);
        try
        {
            string url = "https://localhost:7263/api/DetalleOrdens";
            var response = await ServiciosDetalleOrden.PostDetalleOrden<DetalleOrden>(url, DTOrdenes);
            if (!response.Error)
            {
                SuccessPostDT = true;
                MessagePostDT = String.Empty;
            }
            else
            {
                SuccessPostDT = false;
                MessagePostDT = await response.GetErrorMessageAsync();
            }


        }
        catch (Exception e)
        {
            SuccessPostDT = false;
            MessagePostDT = "Error:" + e.Message;

        }

    }

    //Clase 
    public class Fac
    {
        // public Fac(int orderID, int productID, string productName, int quantity, decimal unitPrice, decimal totality)
        // {
        //     OrderID = orderID;
        //     ProductID = productID;
        //     ProductName = productName;
        //     Quantity = quantity;
        //     UnitPrice = unitPrice;
        //     Totality = totality;
        // }

        /*Para crear el objeto factura, sea con constructor o no*/

        public int OrderID { get; set; }
        public int ProductID { get; set; }
        public string? ProductName { get; set; }
        public int Quantity { get; set; }
        public decimal UnitPrice { get; set; }
        public decimal Totality { get; set; }  
    }

    //Metodo para llenar el objeto factura
    public void LlenarObjetoFactura()
    {
        Factura = new Fac
        {
                OrderID=CodOrder,
                ProductID=CodigoSeleccionado,
                ProductName=ProductName,
                Quantity=Cantidad,
                UnitPrice=PrecioUnitario,
                Totality=Total
        };

        // Factura = new Fac(CodOrder, CodigoSeleccionado, ProductName, Cantidad,PrecioUnitario, Total);


        /*De las 2 formas sirve para crear el objeto, pero de la primera, no se puede poner constructor*/
    }


    //Metodo para comprobar que la lista de factura no esta vacia
    public bool SuccessGetFactura = false;
    public string? MessageFactura { get; set; }
    public void MostrarFactura()
    {
        if(listaFactura!=null)
        {
            SuccessGetFactura = true;
            MessageFactura = listaFactura.ToString();
        }
        else
        {
            SuccessGetFactura = false;

        }
    }
}
